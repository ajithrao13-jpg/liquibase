stages:
  - validate
  - deploy
  - rollback

variables:
  POSTGRES_JDBC_VERSION: "42.7.8"
  DRIVER_JAR: "$CI_PROJECT_DIR/postgresql-${POSTGRES_JDBC_VERSION}.jar"
  LIQUIBASE_PROPERTIES: "$CI_PROJECT_DIR/liquibase.properties"
  LIQUIBASE_IMAGE: "liquibase/liquibase:4.24"

before_script:
  # Download JDBC driver if not exists (for CI/CD environments)
  - |
    if [ ! -f "$DRIVER_JAR" ]; then
      echo "Downloading PostgreSQL JDBC driver version ${POSTGRES_JDBC_VERSION}..."
      if command -v curl >/dev/null 2>&1; then
        curl -L -o "$DRIVER_JAR" "https://repo1.maven.org/maven2/org/postgresql/postgresql/${POSTGRES_JDBC_VERSION}/postgresql-${POSTGRES_JDBC_VERSION}.jar"
      else
        wget -O "$DRIVER_JAR" "https://repo1.maven.org/maven2/org/postgresql/postgresql/${POSTGRES_JDBC_VERSION}/postgresql-${POSTGRES_JDBC_VERSION}.jar"
      fi
    fi
  # Validate required environment variables
  - |
    for var in DB_HOST DB_PORT DB_NAME DB_USER DB_PASS; do
      if [ -z "${!var}" ]; then
        echo "ERROR: Required environment variable $var is not set"
        exit 1
      fi
    done
  # Sanitize author for Liquibase changesets
  - |
    AUTHOR_SANITIZED=$(echo "$CI_COMMIT_AUTHOR" | sed 's/<.*>//' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' | tr ' :/' '_')
    export AUTHOR_SANITIZED
  # Create liquibase.properties with parameters
  - |
    printf '%s\n' \
      "changeLogFile: db.changelog-master.xml" \
      "url: jdbc:postgresql://$DB_HOST:$DB_PORT/$DB_NAME" \
      "username: $DB_USER" \
      "password: $DB_PASS" \
      "parameter.author: $AUTHOR_SANITIZED" \
      "parameter.changesetId: $CI_COMMIT_SHA" \
      "logLevel: INFO" \
    > "$LIQUIBASE_PROPERTIES"

# Validation stage - runs before deployment
validate_changelog:
  stage: validate
  image: $LIQUIBASE_IMAGE
  script:
    - echo "Validating changelog files..."
    # Validate changelog syntax
    - |
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        validate
    # Check for pending changes
    - |
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        status --verbose
  only:
    - merge_requests
    - main
    - develop

# Deployment stage
deploy_database:
  stage: deploy
  image: $LIQUIBASE_IMAGE
  script:
    - echo "Starting database deployment for pipeline $CI_PIPELINE_ID"
    # Verify JDBC driver exists
    - |
      if [ ! -f "$DRIVER_JAR" ]; then
        echo "ERROR: JDBC driver not found at $DRIVER_JAR"
        exit 1
      fi
    # Tag current DB state before changes
    - |
      echo "Tagging current database state with tag: $CI_PIPELINE_ID"
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        tag "$CI_PIPELINE_ID"
    # Show what changes will be applied
    - |
      echo "Pending changes to be applied:"
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        status --verbose
    # Apply database changes
    - |
      echo "Applying database changes..."
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        update
    # Verify deployment success
    - |
      echo "Deployment completed successfully for pipeline $CI_PIPELINE_ID"
  only:
    - main
    - develop
  environment:
    name: production
    action: start
  when: manual

# Rollback stage - manual trigger only
rollback_database:
  stage: rollback
  image: $LIQUIBASE_IMAGE
  when: manual
  script:
    - echo "Starting rollback to tag: $CI_PIPELINE_ID"
    # Verify JDBC driver exists
    - |
      if [ ! -f "$DRIVER_JAR" ]; then
        echo "ERROR: JDBC driver not found at $DRIVER_JAR"
        exit 1
      fi
    # Show rollback SQL (dry run)
    - |
      echo "Rollback SQL preview:"
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        rollback-sql "$CI_PIPELINE_ID" || true
    # Confirm and execute rollback
    - |
      echo "Executing rollback to tag: $CI_PIPELINE_ID"
      liquibase \
        --classpath="$DRIVER_JAR" \
        --defaultsFile="$LIQUIBASE_PROPERTIES" \
        rollback "$CI_PIPELINE_ID"
    - echo "Rollback completed successfully"
  only:
    - main
    - develop
  environment:
    name: production
    action: rollback
