# List of stages for jobs and their order of execution.
stages:
  - build
  - test
  - deploy
  - compare


# Helper functions to determine if the database is ready for deployments (lines 28-33) or rollbacks (lines 35-42) when tag is applied.
.functions: &functions |
  function isUpToDate(){
    status=$(liquibase status --verbose)
    if [[ $status == *'is up to date'* ]]; then
      echo "database is already up to date" & exit 0
    fi;
  }

  function isRollback(){
    if [ -z "$TAG" ]; then
      echo "No TAG provided, running any pending changes"
    elif [[ "$(liquibase rollbackSQL $TAG)" ]]; then
      liquibase --logLevel=info --logFile=${CI_JOB_NAME}_${CI_PIPELINE_ID}.log rollback $TAG && exit 0
    else exit 0
    fi;
  }
#    -----------------------------------------------------------------------------------------


# This is a series of Liquibase commands that can be run while doing database migrations from Liquibase docs at https://docs.liquibase.com/commands/home.html
.liquibase_job:
  before_script:
    - *functions
    - isRollback
    - isUpToDate
    - liquibase checks run
    - liquibase updateSQL
    - liquibase update
    - liquibase rollbackOneUpdate --force
    - liquibase tag $CI_PIPELINE_ID
    - liquibase --logFile=${CI_JOB_NAME}_${CI_PIPELINE_ID}.log --logLevel=info update
    - liquibase history

  artifacts:
      paths:
        - ${CI_JOB_NAME}_${CI_PIPELINE_ID}.log
      expire_in: 1 week


# This job runs in the build stage, which runs first.  Uncomment sections below (line 68) to extend the .liquibase_job, To use the Liquibase Docker Image (line 69) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 75,76). 
build-job:
  tags:
    - test_db
  extends: .liquibase_job
  image: liquibase/liquibase:latest
  stage: build
  environment:
    name: DEV
  script:
    - echo "This job tested successfully with liquibase in DEV environment"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'


# This job runs in the test stage. It only starts when the job in the build stage completes successfully. Uncomment sections below (line 81) to extend the .liquibase_job, To use the Liquibase Docker Image (line 82) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 88,89). 
test-job:
  tags:
    - test_db
  extends: .liquibase_job
  image: liquibase/liquibase:latest
  stage: test
  environment:
    name: QA
  script:
    - echo "This job testsed successfully with liquibase in TEST environment"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'


# This job runs in the test stage. It only starts when the job in the build stage completes successfully. Uncomment sections below (line 94) to extend the .liquibase_job, To use the Liquibase Docker Image (line 95) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 101,102).
deploy-prod:
  tags:
    - prod_db
  extends: .liquibase_job
  image: liquibase/liquibase:latest
  stage: deploy
  environment:
    name: PROD
  script:
    - echo "This job deployed successfully Liquibase in a production environment from the $CI_COMMIT_BRANCH branch."
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'


# This job compares dev database with test database to detect any drifts in the pipeline. Learn more about comparing database with Liquibase here https://docs.liquibase.com/commands/diff.html
# Uncomment sections below to use the Liquibase Docker Image (line 108), run the diff command (lines 114,115) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 116,117).
DEV->TEST:
  tags:
    - test_db
  image: liquibase/liquibase:latest
  stage: compare
  environment:
    name: QA
  script:
    - echo "Comparing databases DEV --> TEST"
    - liquibase diff
    - liquibase --outputFile=diff_between_DEV_TEST.json diff --format=json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  artifacts:
    paths:
      - diff_between_DEV_TEST.json
    expire_in: 1 week


# This job compares test database with prod database to detect any drifts in the pipeline.
# Uncomment sections below to use the Liquibase Docker Image (line 127), run the diff command (lines 133,134) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 135,136).
TEST->PROD:
  tags:
    - prod_db
  image: liquibase/liquibase:latest
  stage: compare
  environment:
    name: PROD
  script:
    - echo "Comparing databases TEST --> PROD"
    - liquibase diff
    - liquibase --outputFile=diff_between_TEST_PROD.json diff --format=json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

  artifacts:
    paths:
      - diff_between_TEST_PROD.json
    expire_in: 1 week


# This job creates a snapshot of prod database.  You can use the snapshot file to run comparisons with the production database to investigate for any potential issues. https://www.liquibase.com/devsecops
# Uncomment sections below to use the Liquibase Docker Image (line 147), run the snapshot command (line 153) and/or have a rule to only deploy the pipeline when changes are made on the default branch (lines 154,155).
snapshot PROD:
  tags:
    - prod_db
  image: liquibase/liquibase:latest
  stage: .post
  environment:
    name: PROD
  script:
    - echo "Snapshotting database PROD"
    - liquibase --outputFile=snapshot_PROD_${CI_PIPELINE_ID}.json snapshot --snapshotFormat=json --log-level debug
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

  artifacts:
    paths:
      - snapshot_PROD_${CI_PIPELINE_ID}.json
    expire_in: 1 week
